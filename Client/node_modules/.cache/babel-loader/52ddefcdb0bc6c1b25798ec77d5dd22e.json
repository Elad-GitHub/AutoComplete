{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elad Cohen\\\\Desktop\\\\AutoComplete\\\\Client\\\\src\\\\AutoCompleteInput.js\";\nimport React from \"react\";\nimport { throttle, debounce } from \"throttle-debounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AutoCompleteInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChange = event => {\n      this.setState({\n        text: event.target.value\n      }, () => {\n        const value = this.state.text;\n\n        if (value < 5 || value.endsWith(' ')) {\n          this.autocompleteSearchThrottled(this.state.text);\n        } else {\n          this.autocompleteSearchDebounced(this.state.text);\n        }\n      });\n    };\n\n    this.autocompleteSearch = value => {\n      let suggestions = [];\n\n      if (value.length > 0) {\n        fetch('https://localhost:44315/api/Cities/' + value).then(response => {\n          try {\n            return response.json();\n          } catch {\n            return JSON.parse(text);\n          }\n        }).then(data => {\n          if (data.length > 0) {\n            for (let i = 0; i < data.length; i++) {\n              suggestions.push(data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"]);\n            }\n\n            this.setState(() => ({\n              suggestions\n            }));\n          } else {\n            this.suggestionSelected(value);\n          }\n        });\n      } else {\n        this.suggestionSelected(value);\n      }\n    };\n\n    this.state = {\n      suggestions: [],\n      text: ''\n    };\n    this.autocompleteSearchDebounced = debounce(3000, this.autocompleteSearch);\n    this.autocompleteSearchThrottled = throttle(3000, this.autocompleteSearch);\n  }\n\n  suggestionSelected(value) {\n    this.setState(() => ({\n      suggestions: [],\n      text: value\n    }));\n  }\n\n  renderSuggestion() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestions.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => this.suggestionSelected(item),\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 47\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: text,\n        onChange: this.onTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), this.renderSuggestion()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n} //cache - redis cache or in memory cache - if not exist in cache goes to database, clean cache by user and by time on appsettings\n// exceptions and user messages, login? Loader?\n//typos - Though “iphone” is misspelled, the results flexibly assume what the user meant\n//category - For some terms, the user can drill down by category for a more specific search\n//unit tests\n//data source improvment - federated search","map":{"version":3,"sources":["C:/Users/Elad Cohen/Desktop/AutoComplete/Client/src/AutoCompleteInput.js"],"names":["React","throttle","debounce","AutoCompleteInput","Component","constructor","props","onTextChange","event","setState","text","target","value","state","endsWith","autocompleteSearchThrottled","autocompleteSearchDebounced","autocompleteSearch","suggestions","length","fetch","then","response","json","JSON","parse","data","i","push","suggestionSelected","renderSuggestion","map","item","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { throttle, debounce } from \"throttle-debounce\";\r\n\r\nexport default class AutoCompleteInput extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            suggestions: [],\r\n            text: ''\r\n        };\r\n        this.autocompleteSearchDebounced = debounce(3000, this.autocompleteSearch);\r\n        this.autocompleteSearchThrottled = throttle(3000, this.autocompleteSearch);\r\n    }\r\n\r\n    onTextChange = event => {\r\n        this.setState({ text: event.target.value }, () => {\r\n        const value = this.state.text;\r\n        if(value < 5 || value.endsWith(' ')){\r\n            this.autocompleteSearchThrottled(this.state.text);\r\n        }else{\r\n            this.autocompleteSearchDebounced(this.state.text);\r\n        }\r\n        });\r\n    };\r\n\r\n    autocompleteSearch = (value) => {\r\n        let suggestions = [];\r\n        \r\n        if(value.length > 0){\r\n            fetch('https://localhost:44315/api/Cities/' + value)\r\n            .then(response => {\r\n                    try{\r\n                        return response.json();\r\n                    }\r\n                    catch{\r\n                        return JSON.parse(text);\r\n                    }\r\n                }\r\n                ).then(data => {\r\n                    if(data.length > 0)\r\n                    {\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            suggestions.push(data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"]);\r\n                        } \r\n                        this.setState(() => ({suggestions}));    \r\n                    }else{\r\n                        this.suggestionSelected(value);\r\n                    }   \r\n                });\r\n        }\r\n        else{\r\n            this.suggestionSelected(value);\r\n        }\r\n    }\r\n\r\n    suggestionSelected(value){\r\n        this.setState(() => ({\r\n            suggestions: [],\r\n            text: value\r\n        }))\r\n    }\r\n\r\n    renderSuggestion(){\r\n        const { suggestions } = this.state;\r\n\r\n        if(suggestions.length === 0){\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <div id=\"result\">\r\n                <ul>\r\n                    {suggestions.map((item => <li onClick={() => this.suggestionSelected(item)}>{item}</li>))}\r\n                </ul> \r\n            </div>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        const {text} = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={text} onChange={this.onTextChange}/>\r\n                {this.renderSuggestion()}           \r\n            </div>           \r\n        )\r\n    }\r\n}\r\n\r\n//cache - redis cache or in memory cache - if not exist in cache goes to database, clean cache by user and by time on appsettings\r\n// exceptions and user messages, login? Loader?\r\n//typos - Though “iphone” is misspelled, the results flexibly assume what the user meant\r\n//category - For some terms, the user can drill down by category for a more specific search\r\n//unit tests\r\n//data source improvment - federated search"]},"metadata":{},"sourceType":"module"}