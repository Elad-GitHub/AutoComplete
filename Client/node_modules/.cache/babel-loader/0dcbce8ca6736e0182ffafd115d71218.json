{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elad Cohen\\\\Desktop\\\\AutoComplete\\\\Client\\\\src\\\\AutoCompleteInput.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AutoCompleteInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      // Clears running timer and starts a new one each time the user types\n      clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        this.toggleCheck();\n      }, 1000);\n    };\n\n    this.toggleCheck = () => {\n      this.setState(prevState => ({\n        checked: !prevState.checked\n      }));\n    };\n\n    this.onTextChange = e => {\n      const value = e.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        fetch('https://localhost:44315/api/Cities/' + e.target.value).then(response => response.json()).then(data => {\n          if (data.length > 0) {\n            for (let i = 0; i < data.length; i++) {\n              suggestions.push(data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"]);\n            }\n\n            this.setState(() => ({\n              suggestions,\n              text: value\n            }));\n          } else {\n            this.suggestionSelected(value);\n          }\n        });\n      } else {\n        this.suggestionSelected(value);\n      }\n    };\n\n    this.state = {\n      suggestions: [],\n      text: ''\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.text !== this.state.text) {\n      this.onTextChange();\n    }\n  }\n\n  suggestionSelected(value) {\n    this.setState(() => ({\n      suggestions: [],\n      text: value\n    }));\n  }\n\n  renderSuggestion() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestions.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => this.suggestionSelected(item),\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 47\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: this.state.checked,\n        onChange: this.toggleCheck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 18\n      }, this), this.renderSuggestion()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n} //onKeyUp={this.showResults}\n//database optimization - indexes\n//cache - redis cache or in memory cache - if not exist in cache goes to database, clean cache by user and by time on appsettings\n// exceptions and user messages, login? Loader?\n//insert of new city\n//suspend till user finish to type to minimize networke calls\n//typos - Though “iphone” is misspelled, the results flexibly assume what the user meant\n//category - For some terms, the user can drill down by category for a more specific search\n//unit tests\n//data source improvment - federated search","map":{"version":3,"sources":["C:/Users/Elad Cohen/Desktop/AutoComplete/Client/src/AutoCompleteInput.js"],"names":["React","AutoCompleteInput","Component","constructor","props","handleCheck","clearTimeout","timer","setTimeout","toggleCheck","setState","prevState","checked","onTextChange","e","value","target","suggestions","length","fetch","then","response","json","data","i","push","text","suggestionSelected","state","componentDidUpdate","prevProps","renderSuggestion","map","item","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nexport default class AutoCompleteInput extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            suggestions: [],\r\n            text: ''\r\n        };\r\n    }\r\n\r\n    componentDidUpdate (prevProps, prevState) {\r\n        if(prevState.text !== this.state.text) {\r\n            this.onTextChange();\r\n        }\r\n    }\r\n\r\n    handleCheck = () => {\r\n    // Clears running timer and starts a new one each time the user types\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n        this.toggleCheck();\r\n        }, 1000);\r\n    }\r\n  \r\n    toggleCheck = () => {\r\n        this.setState( prevState => ({ checked: !prevState.checked }));\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        \r\n        if(value.length > 0){\r\n            fetch('https://localhost:44315/api/Cities/' + e.target.value).then(response => \r\n                response.json()\r\n            ).then(data => {\r\n                if(data.length > 0){\r\n                    for (let i = 0; i < data.length; i++) {\r\n                        suggestions.push(data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"]);\r\n                    } \r\n                \r\n                    this.setState(() => ({suggestions, text: value}));    \r\n                }else{\r\n                    this.suggestionSelected(value);\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            this.suggestionSelected(value);\r\n        }\r\n    }\r\n\r\n    suggestionSelected(value){\r\n        this.setState(() => ({\r\n            suggestions: [],\r\n            text: value\r\n        }))\r\n    }\r\n\r\n    renderSuggestion(){\r\n        const { suggestions } = this.state;\r\n\r\n        if(suggestions.length === 0){\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <div id=\"result\">\r\n                <ul>\r\n                    {suggestions.map((item => <li onClick={() => this.suggestionSelected(item)}>{item}</li>))}\r\n                </ul> \r\n            </div>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        const {text} = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={text} />\r\n                {/* onChange={this.onTextChange} */}\r\n                 <input type=\"checkbox\" checked={this.state.checked} onChange={this.toggleCheck} />\r\n                {this.renderSuggestion()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//onKeyUp={this.showResults}\r\n//database optimization - indexes\r\n//cache - redis cache or in memory cache - if not exist in cache goes to database, clean cache by user and by time on appsettings\r\n// exceptions and user messages, login? Loader?\r\n//insert of new city\r\n//suspend till user finish to type to minimize networke calls\r\n//typos - Though “iphone” is misspelled, the results flexibly assume what the user meant\r\n//category - For some terms, the user can drill down by category for a more specific search\r\n//unit tests\r\n//data source improvment - federated search"]},"metadata":{},"sourceType":"module"}