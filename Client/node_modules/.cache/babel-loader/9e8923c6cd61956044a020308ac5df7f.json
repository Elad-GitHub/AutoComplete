{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elad Cohen\\\\Desktop\\\\AutoComplete\\\\Client\\\\src\\\\AutoCompleteInput.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AutoCompleteInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTextChange = e => {\n      const value = e.target.value;\n      let suggestions = [];\n\n      if (value.length > 0) {\n        fetch('https://localhost:44315/api/Cities/' + e.target.value).then(response => response.json()).then(data => {\n          for (let i = 0; i < data.length; i++) {\n            suggestions.push(data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"]);\n          }\n\n          this.setState(() => ({\n            suggestions,\n            text: value\n          }));\n        });\n      } else {\n        this.setState(() => ({\n          text: value\n        }));\n      }\n    };\n\n    this.state = {\n      suggestions: [],\n      text: ''\n    };\n  }\n\n  suggestionSelected(value) {\n    this.setState(() => ({\n      suggestions: [],\n      text: value\n    }));\n  }\n\n  renderSuggestion() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestions.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => this.suggestionSelected(item),\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 47\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  } // showResults(e) {\n  //     var res = document.getElementById(\"result\");\n  //     res.innerHTML = '';\n  //     if (e.target.value === '') {\n  //         return;\n  //     }\n  //     let list = '';  \n  //     fetch('https://localhost:44315/api/Cities/' + e.target.value).then(function (response) {\n  //         return response.json();\n  //     }).then(function (data) {\n  //         for (let i = 0; i < data.length; i++) {\n  //             list += '<li>' + data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"] +  '</li>';\n  //         }\n  //         res.innerHTML = '<ul>' + list + '</ul>';\n  //         return true;\n  //     }).catch(function (err) {\n  //         console.warn('Something went wrong.', err);\n  //         return false;\n  //     });\n  // }\n\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: text,\n        onChange: this.onTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), this.renderSuggestion()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n} //onKeyUp={this.showResults}\n//suspend till user finish to type to minimize networke calls\n//typos - Though “iphone” is misspelled, the results flexibly assume what the user meant\n//category - For some terms, the user can drill down by category for a more specific search\n//unit tests\n//data source improvment - federated search","map":{"version":3,"sources":["C:/Users/Elad Cohen/Desktop/AutoComplete/Client/src/AutoCompleteInput.js"],"names":["React","AutoCompleteInput","Component","constructor","props","onTextChange","e","value","target","suggestions","length","fetch","then","response","json","data","i","push","setState","text","state","suggestionSelected","renderSuggestion","map","item","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAA+C;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAQlBC,YARkB,GAQFC,CAAD,IAAO;AAClB,YAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,UAAIE,WAAW,GAAG,EAAlB;;AAEA,UAAGF,KAAK,CAACG,MAAN,GAAe,CAAlB,EAAoB;AAChBC,QAAAA,KAAK,CAAC,wCAAwCL,CAAC,CAACE,MAAF,CAASD,KAAlD,CAAL,CAA8DK,IAA9D,CAAmEC,QAAQ,IACvEA,QAAQ,CAACC,IAAT,EADJ,EAEEF,IAFF,CAEOG,IAAI,IAAI;AACX,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACL,MAAzB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCP,YAAAA,WAAW,CAACQ,IAAZ,CAAiBF,IAAI,CAACC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,IAAlB,GAAyBD,IAAI,CAACC,CAAD,CAAJ,CAAQ,YAAR,CAAzB,GAAiD,IAAjD,GAAwDD,IAAI,CAACC,CAAD,CAAJ,CAAQ,SAAR,CAAzE;AACH;;AACD,eAAKE,QAAL,CAAc,OAAO;AAACT,YAAAA,WAAD;AAAcU,YAAAA,IAAI,EAAEZ;AAApB,WAAP,CAAd;AACH,SAPD;AAQH,OATD,MASK;AACD,aAAKW,QAAL,CAAc,OAAO;AAACC,UAAAA,IAAI,EAAEZ;AAAP,SAAP,CAAd;AACH;AACJ,KAxBiB;;AAEd,SAAKa,KAAL,GAAa;AACTX,MAAAA,WAAW,EAAE,EADJ;AAETU,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAoBDE,EAAAA,kBAAkB,CAACd,KAAD,EAAO;AACrB,SAAKW,QAAL,CAAc,OAAO;AACjBT,MAAAA,WAAW,EAAE,EADI;AAEjBU,MAAAA,IAAI,EAAEZ;AAFW,KAAP,CAAd;AAIH;;AAEDe,EAAAA,gBAAgB,GAAE;AACd,UAAM;AAAEb,MAAAA;AAAF,QAAkB,KAAKW,KAA7B;;AAEA,QAAGX,WAAW,CAACC,MAAZ,KAAuB,CAA1B,EAA4B;AACxB,aAAO,IAAP;AACH;;AAED,wBACI;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA,6BACI;AAAA,kBACKD,WAAW,CAACc,GAAZ,CAAiBC,IAAI,iBAAI;AAAI,UAAA,OAAO,EAAE,MAAM,KAAKH,kBAAL,CAAwBG,IAAxB,CAAnB;AAAA,oBAAmDA;AAAnD;AAAA;AAAA;AAAA;AAAA,gBAAzB;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GAhDyD,CAkD1D;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACN,MAAAA;AAAD,QAAS,KAAKC,KAApB;AACA,wBACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAED,IAA1B;AAAgC,QAAA,QAAQ,EAAE,KAAKd;AAA/C;AAAA;AAAA;AAAA;AAAA,cADJ,EAEK,KAAKiB,gBAAL,EAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAnFyD,C,CAsF9D;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\n\r\nexport default class AutoCompleteInput extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            suggestions: [],\r\n            text: ''\r\n        };\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        \r\n        if(value.length > 0){\r\n            fetch('https://localhost:44315/api/Cities/' + e.target.value).then(response => \r\n                response.json()\r\n            ).then(data => {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    suggestions.push(data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"]);\r\n                } \r\n                this.setState(() => ({suggestions, text: value}));             \r\n            });\r\n        }else{\r\n            this.setState(() => ({text: value}));   \r\n        }\r\n    }\r\n\r\n    suggestionSelected(value){\r\n        this.setState(() => ({\r\n            suggestions: [],\r\n            text: value\r\n        }))\r\n    }\r\n\r\n    renderSuggestion(){\r\n        const { suggestions } = this.state;\r\n\r\n        if(suggestions.length === 0){\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <div id=\"result\">\r\n                <ul>\r\n                    {suggestions.map((item => <li onClick={() => this.suggestionSelected(item)}>{item}</li>))}\r\n                </ul> \r\n            </div>\r\n        );\r\n    }\r\n\r\n    // showResults(e) {\r\n    //     var res = document.getElementById(\"result\");\r\n        \r\n    //     res.innerHTML = '';\r\n\r\n    //     if (e.target.value === '') {\r\n    //         return;\r\n    //     }\r\n\r\n    //     let list = '';  \r\n        \r\n    //     fetch('https://localhost:44315/api/Cities/' + e.target.value).then(function (response) {\r\n    //         return response.json();\r\n    //     }).then(function (data) {\r\n    //         for (let i = 0; i < data.length; i++) {\r\n    //             list += '<li>' + data[i][\"name\"] + ', ' + data[i][\"subCountry\"] + ', ' + data[i][\"country\"] +  '</li>';\r\n    //         }\r\n    //         res.innerHTML = '<ul>' + list + '</ul>';\r\n    //         return true;\r\n    //     }).catch(function (err) {\r\n    //         console.warn('Something went wrong.', err);\r\n    //         return false;\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        const {text} = this.state;\r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={text} onChange={this.onTextChange}/>\r\n                {this.renderSuggestion()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//onKeyUp={this.showResults}\r\n//suspend till user finish to type to minimize networke calls\r\n//typos - Though “iphone” is misspelled, the results flexibly assume what the user meant\r\n//category - For some terms, the user can drill down by category for a more specific search\r\n//unit tests\r\n//data source improvment - federated search"]},"metadata":{},"sourceType":"module"}